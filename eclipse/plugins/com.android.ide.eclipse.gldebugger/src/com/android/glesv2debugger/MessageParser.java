/*
 ** Copyright 2011, The Android Open Source Project
 **
 ** Licensed under the Apache License, Version 2.0 (the "License");
 ** you may not use this file except in compliance with the License.
 ** You may obtain a copy of the License at
 **
 **     http://www.apache.org/licenses/LICENSE-2.0
 **
 ** Unless required by applicable law or agreed to in writing, software
 ** distributed under the License is distributed on an "AS IS" BASIS,
 ** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ** See the License for the specific language governing permissions and
 ** limitations under the License.
 */

// auto generated by generate_MessageParser_java.py,
//  which also prints skeleton code for MessageParserEx.java

package com.android.glesv2debugger;

import com.android.glesv2debugger.DebuggerMessage.Message;
import com.android.glesv2debugger.DebuggerMessage.Message.Function;
import com.google.protobuf.ByteString;

import java.nio.ByteBuffer;

public abstract class MessageParser {

    String args;

    String[] GetList()
    {
        assert args.charAt(0) == '[';
        String arg = args;
        args = args.substring(args.indexOf(']') + 1);
        int comma = args.indexOf(',');
        if (comma >= 0)
            args = args.substring(comma + 1).trim();
        else
            args = null;
        arg = arg.substring(1, arg.indexOf(']')).trim();
        return arg.split(",");
    }

    ByteString ParseFloats(int count) {
        ByteBuffer buffer = ByteBuffer.allocate(count * 4);
        String [] arg = GetList();
        for (int i = 0; i < count; i++)
            buffer.putFloat(Float.parseFloat(arg[i].trim()));
        return ByteString.copyFrom(buffer);
    }

    ByteString ParseInts(int count) {
        ByteBuffer buffer = ByteBuffer.allocate(count * 4);
        String [] arg = GetList();
        for (int i = 0; i < count; i++)
            buffer.putInt(Integer.parseInt(arg[i].trim()));
        return ByteString.copyFrom(buffer);
    }

    ByteString ParseUInts(int count) {
        ByteBuffer buffer = ByteBuffer.allocate(count * 4);
        String [] arg = GetList();
        for (int i = 0; i < count; i++)
            buffer.putInt((int)(Long.parseLong(arg[i].trim()) & 0xffffffff));
        return ByteString.copyFrom(buffer);
    }

    ByteString ParseMatrix(int columns, int count) {
        return ParseFloats(columns * count);
    }

    ByteString ParseString() {
        // TODO: escape sequence and proper string literal
        String arg = args.substring(args.indexOf('"') + 1, args.lastIndexOf('"'));
        args = args.substring(args.lastIndexOf('"'));
        int comma = args.indexOf(',');
        if (comma >= 0)
            args = args.substring(comma + 1).trim();
        else
            args = null;
        return ByteString.copyFromUtf8(arg);
    }

    String GetArgument()
    {
        int comma = args.indexOf(",");
        String arg = null;
        if (comma >= 0)
        {
            arg = args.substring(0, comma).trim();
            args = args.substring(comma + 1).trim();
        }
        else
        {
            arg = args;
            args = null;
        }
        if (arg.indexOf("=") >= 0)
            arg = arg.substring(arg.indexOf("=") + 1);
        return arg;
    }

    int ParseArgument()
    {
        String arg = GetArgument();
        if (arg.startsWith("GL_"))
            return GLEnum.valueOf(arg).value;
        else if (arg.toLowerCase().startsWith("0x"))
            return Integer.parseInt(arg.substring(2), 16);
        else
            return Integer.parseInt(arg);
    }

    int ParseFloat()
    {
        String arg = GetArgument();
        return Float.floatToRawIntBits(Float.parseFloat(arg));
    }

    public void Parse(final Message.Builder builder, String string) {
        int lparen = string.indexOf("("), rparen = string.lastIndexOf(")");
        String s = string.substring(0, lparen).trim();
        args = string.substring(lparen + 1, rparen);
        String[] t = s.split(" ");
        Function function = Function.valueOf(t[t.length - 1]);
        builder.setFunction(function);
        switch (function) {
            case glActiveTexture:
                builder.setArg0(ParseArgument()); // GLenum texture
                break;
            case glAttachShader:
                builder.setArg0(ParseArgument()); // GLuint program
                builder.setArg1(ParseArgument()); // GLuint shader
                break;
            case glBindAttribLocation:
                builder.setArg0(ParseArgument()); // GLuint program
                builder.setArg1(ParseArgument()); // GLuint index
                builder.setData(ParseString()); // GLchar name
                break;
            case glBindBuffer:
                builder.setArg0(ParseArgument()); // GLenum target
                builder.setArg1(ParseArgument()); // GLuint buffer
                break;
            case glBindFramebuffer:
                builder.setArg0(ParseArgument()); // GLenum target
                builder.setArg1(ParseArgument()); // GLuint framebuffer
                break;
            case glBindRenderbuffer:
                builder.setArg0(ParseArgument()); // GLenum target
                builder.setArg1(ParseArgument()); // GLuint renderbuffer
                break;
            case glBindTexture:
                builder.setArg0(ParseArgument()); // GLenum target
                builder.setArg1(ParseArgument()); // GLuint texture
                break;
            case glBlendColor:
                builder.setArg0(ParseFloat()); // GLclampf red
                builder.setArg1(ParseFloat()); // GLclampf green
                builder.setArg2(ParseFloat()); // GLclampf blue
                builder.setArg3(ParseFloat()); // GLclampf alpha
                break;
            case glBlendEquation:
                builder.setArg0(ParseArgument()); // GLenum mode
                break;
            case glBlendEquationSeparate:
                builder.setArg0(ParseArgument()); // GLenum modeRGB
                builder.setArg1(ParseArgument()); // GLenum modeAlpha
                break;
            case glBlendFunc:
                builder.setArg0(ParseArgument()); // GLenum sfactor
                builder.setArg1(ParseArgument()); // GLenum dfactor
                break;
            case glBlendFuncSeparate:
                builder.setArg0(ParseArgument()); // GLenum srcRGB
                builder.setArg1(ParseArgument()); // GLenum dstRGB
                builder.setArg2(ParseArgument()); // GLenum srcAlpha
                builder.setArg3(ParseArgument()); // GLenum dstAlpha
                break;
            case glBufferData:
                Parse_glBufferData(builder);
                break;
            case glBufferSubData:
                Parse_glBufferSubData(builder);
                break;
            case glCheckFramebufferStatus:
                builder.setArg0(ParseArgument()); // GLenum target
                break;
            case glClear:
                builder.setArg0(ParseArgument()); // GLbitfield mask
                break;
            case glClearColor:
                builder.setArg0(ParseFloat()); // GLclampf red
                builder.setArg1(ParseFloat()); // GLclampf green
                builder.setArg2(ParseFloat()); // GLclampf blue
                builder.setArg3(ParseFloat()); // GLclampf alpha
                break;
            case glClearDepthf:
                builder.setArg0(ParseFloat()); // GLclampf depth
                break;
            case glClearStencil:
                builder.setArg0(ParseArgument()); // GLint s
                break;
            case glColorMask:
                builder.setArg0(ParseArgument()); // GLboolean red
                builder.setArg1(ParseArgument()); // GLboolean green
                builder.setArg2(ParseArgument()); // GLboolean blue
                builder.setArg3(ParseArgument()); // GLboolean alpha
                break;
            case glCompileShader:
                builder.setArg0(ParseArgument()); // GLuint shader
                break;
            case glCompressedTexImage2D:
                Parse_glCompressedTexImage2D(builder);
                break;
            case glCompressedTexSubImage2D:
                Parse_glCompressedTexSubImage2D(builder);
                break;
            case glCopyTexImage2D:
                builder.setArg0(ParseArgument()); // GLenum target
                builder.setArg1(ParseArgument()); // GLint level
                builder.setArg2(ParseArgument()); // GLenum internalformat
                builder.setArg3(ParseArgument()); // GLint x
                builder.setArg4(ParseArgument()); // GLint y
                builder.setArg5(ParseArgument()); // GLsizei width
                builder.setArg6(ParseArgument()); // GLsizei height
                builder.setArg7(ParseArgument()); // GLint border
                break;
            case glCopyTexSubImage2D:
                builder.setArg0(ParseArgument()); // GLenum target
                builder.setArg1(ParseArgument()); // GLint level
                builder.setArg2(ParseArgument()); // GLint xoffset
                builder.setArg3(ParseArgument()); // GLint yoffset
                builder.setArg4(ParseArgument()); // GLint x
                builder.setArg5(ParseArgument()); // GLint y
                builder.setArg6(ParseArgument()); // GLsizei width
                builder.setArg7(ParseArgument()); // GLsizei height
                break;
            case glCreateProgram:
                break;
            case glCreateShader:
                builder.setArg0(ParseArgument()); // GLenum type
                break;
            case glCullFace:
                builder.setArg0(ParseArgument()); // GLenum mode
                break;
            case glDeleteBuffers:
                builder.setArg0(ParseArgument()); // GLsizei n
                builder.setData(ParseUInts(1 * builder.getArg0())); // GLuint buffers
                break;
            case glDeleteFramebuffers:
                builder.setArg0(ParseArgument()); // GLsizei n
                builder.setData(ParseUInts(1 * builder.getArg0())); // GLuint framebuffers
                break;
            case glDeleteProgram:
                builder.setArg0(ParseArgument()); // GLuint program
                break;
            case glDeleteRenderbuffers:
                builder.setArg0(ParseArgument()); // GLsizei n
                builder.setData(ParseUInts(1 * builder.getArg0())); // GLuint renderbuffers
                break;
            case glDeleteShader:
                builder.setArg0(ParseArgument()); // GLuint shader
                break;
            case glDeleteTextures:
                builder.setArg0(ParseArgument()); // GLsizei n
                builder.setData(ParseUInts(1 * builder.getArg0())); // GLuint textures
                break;
            case glDepthFunc:
                builder.setArg0(ParseArgument()); // GLenum func
                break;
            case glDepthMask:
                builder.setArg0(ParseArgument()); // GLboolean flag
                break;
            case glDepthRangef:
                builder.setArg0(ParseFloat()); // GLclampf zNear
                builder.setArg1(ParseFloat()); // GLclampf zFar
                break;
            case glDetachShader:
                builder.setArg0(ParseArgument()); // GLuint program
                builder.setArg1(ParseArgument()); // GLuint shader
                break;
            case glDisable:
                builder.setArg0(ParseArgument()); // GLenum cap
                break;
            case glDisableVertexAttribArray:
                builder.setArg0(ParseArgument()); // GLuint index
                break;
            case glDrawArrays:
                builder.setArg0(ParseArgument()); // GLenum mode
                builder.setArg1(ParseArgument()); // GLint first
                builder.setArg2(ParseArgument()); // GLsizei count
                break;
            case glDrawElements:
                Parse_glDrawElements(builder);
                break;
            case glEnable:
                builder.setArg0(ParseArgument()); // GLenum cap
                break;
            case glEnableVertexAttribArray:
                builder.setArg0(ParseArgument()); // GLuint index
                break;
            case glFinish:
                break;
            case glFlush:
                break;
            case glFramebufferRenderbuffer:
                builder.setArg0(ParseArgument()); // GLenum target
                builder.setArg1(ParseArgument()); // GLenum attachment
                builder.setArg2(ParseArgument()); // GLenum renderbuffertarget
                builder.setArg3(ParseArgument()); // GLuint renderbuffer
                break;
            case glFramebufferTexture2D:
                builder.setArg0(ParseArgument()); // GLenum target
                builder.setArg1(ParseArgument()); // GLenum attachment
                builder.setArg2(ParseArgument()); // GLenum textarget
                builder.setArg3(ParseArgument()); // GLuint texture
                builder.setArg4(ParseArgument()); // GLint level
                break;
            case glFrontFace:
                builder.setArg0(ParseArgument()); // GLenum mode
                break;
            case glGenBuffers:
                builder.setArg0(ParseArgument()); // GLsizei n
                builder.setData(ParseUInts(1 * builder.getArg0())); // GLuint buffers
                break;
            case glGenerateMipmap:
                builder.setArg0(ParseArgument()); // GLenum target
                break;
            case glGenFramebuffers:
                builder.setArg0(ParseArgument()); // GLsizei n
                builder.setData(ParseUInts(1 * builder.getArg0())); // GLuint framebuffers
                break;
            case glGenRenderbuffers:
                builder.setArg0(ParseArgument()); // GLsizei n
                builder.setData(ParseUInts(1 * builder.getArg0())); // GLuint renderbuffers
                break;
            case glGenTextures:
                builder.setArg0(ParseArgument()); // GLsizei n
                builder.setData(ParseUInts(1 * builder.getArg0())); // GLuint textures
                break;
            case glGetActiveAttrib:
                Parse_glGetActiveAttrib(builder);
                break;
            case glGetActiveUniform:
                Parse_glGetActiveUniform(builder);
                break;
            case glGetAttachedShaders:
                Parse_glGetAttachedShaders(builder);
                break;
            case glGetAttribLocation:
                builder.setArg0(ParseArgument()); // GLuint program
                builder.setData(ParseString()); // GLchar name
                break;
            case glGetBooleanv:
                Parse_glGetBooleanv(builder);
                break;
            case glGetBufferParameteriv:
                Parse_glGetBufferParameteriv(builder);
                break;
            case glGetError:
                break;
            case glGetFloatv:
                Parse_glGetFloatv(builder);
                break;
            case glGetFramebufferAttachmentParameteriv:
                Parse_glGetFramebufferAttachmentParameteriv(builder);
                break;
            case glGetIntegerv:
                Parse_glGetIntegerv(builder);
                break;
            case glGetProgramiv:
                builder.setArg0(ParseArgument()); // GLuint program
                builder.setArg1(ParseArgument()); // GLenum pname
                builder.setData(ParseInts(1)); // GLint params
                break;
            case glGetProgramInfoLog:
                Parse_glGetProgramInfoLog(builder);
                break;
            case glGetRenderbufferParameteriv:
                Parse_glGetRenderbufferParameteriv(builder);
                break;
            case glGetShaderiv:
                builder.setArg0(ParseArgument()); // GLuint shader
                builder.setArg1(ParseArgument()); // GLenum pname
                builder.setData(ParseInts(1)); // GLint params
                break;
            case glGetShaderInfoLog:
                Parse_glGetShaderInfoLog(builder);
                break;
            case glGetShaderPrecisionFormat:
                Parse_glGetShaderPrecisionFormat(builder);
                break;
            case glGetShaderSource:
                Parse_glGetShaderSource(builder);
                break;
            case glGetString:
                builder.setArg0(ParseArgument()); // GLenum name
                break;
            case glGetTexParameterfv:
                Parse_glGetTexParameterfv(builder);
                break;
            case glGetTexParameteriv:
                Parse_glGetTexParameteriv(builder);
                break;
            case glGetUniformfv:
                Parse_glGetUniformfv(builder);
                break;
            case glGetUniformiv:
                Parse_glGetUniformiv(builder);
                break;
            case glGetUniformLocation:
                builder.setArg0(ParseArgument()); // GLuint program
                builder.setData(ParseString()); // GLchar name
                break;
            case glGetVertexAttribfv:
                Parse_glGetVertexAttribfv(builder);
                break;
            case glGetVertexAttribiv:
                Parse_glGetVertexAttribiv(builder);
                break;
            case glGetVertexAttribPointerv:
                Parse_glGetVertexAttribPointerv(builder);
                break;
            case glHint:
                builder.setArg0(ParseArgument()); // GLenum target
                builder.setArg1(ParseArgument()); // GLenum mode
                break;
            case glIsBuffer:
                builder.setArg0(ParseArgument()); // GLuint buffer
                break;
            case glIsEnabled:
                builder.setArg0(ParseArgument()); // GLenum cap
                break;
            case glIsFramebuffer:
                builder.setArg0(ParseArgument()); // GLuint framebuffer
                break;
            case glIsProgram:
                builder.setArg0(ParseArgument()); // GLuint program
                break;
            case glIsRenderbuffer:
                builder.setArg0(ParseArgument()); // GLuint renderbuffer
                break;
            case glIsShader:
                builder.setArg0(ParseArgument()); // GLuint shader
                break;
            case glIsTexture:
                builder.setArg0(ParseArgument()); // GLuint texture
                break;
            case glLineWidth:
                builder.setArg0(ParseFloat()); // GLfloat width
                break;
            case glLinkProgram:
                builder.setArg0(ParseArgument()); // GLuint program
                break;
            case glPixelStorei:
                builder.setArg0(ParseArgument()); // GLenum pname
                builder.setArg1(ParseArgument()); // GLint param
                break;
            case glPolygonOffset:
                builder.setArg0(ParseFloat()); // GLfloat factor
                builder.setArg1(ParseFloat()); // GLfloat units
                break;
            case glReadPixels:
                Parse_glReadPixels(builder);
                break;
            case glReleaseShaderCompiler:
                break;
            case glRenderbufferStorage:
                builder.setArg0(ParseArgument()); // GLenum target
                builder.setArg1(ParseArgument()); // GLenum internalformat
                builder.setArg2(ParseArgument()); // GLsizei width
                builder.setArg3(ParseArgument()); // GLsizei height
                break;
            case glSampleCoverage:
                builder.setArg0(ParseFloat()); // GLclampf value
                builder.setArg1(ParseArgument()); // GLboolean invert
                break;
            case glScissor:
                builder.setArg0(ParseArgument()); // GLint x
                builder.setArg1(ParseArgument()); // GLint y
                builder.setArg2(ParseArgument()); // GLsizei width
                builder.setArg3(ParseArgument()); // GLsizei height
                break;
            case glShaderBinary:
                Parse_glShaderBinary(builder);
                break;
            case glShaderSource:
                Parse_glShaderSource(builder);
                break;
            case glStencilFunc:
                builder.setArg0(ParseArgument()); // GLenum func
                builder.setArg1(ParseArgument()); // GLint ref
                builder.setArg2(ParseArgument()); // GLuint mask
                break;
            case glStencilFuncSeparate:
                builder.setArg0(ParseArgument()); // GLenum face
                builder.setArg1(ParseArgument()); // GLenum func
                builder.setArg2(ParseArgument()); // GLint ref
                builder.setArg3(ParseArgument()); // GLuint mask
                break;
            case glStencilMask:
                builder.setArg0(ParseArgument()); // GLuint mask
                break;
            case glStencilMaskSeparate:
                builder.setArg0(ParseArgument()); // GLenum face
                builder.setArg1(ParseArgument()); // GLuint mask
                break;
            case glStencilOp:
                builder.setArg0(ParseArgument()); // GLenum fail
                builder.setArg1(ParseArgument()); // GLenum zfail
                builder.setArg2(ParseArgument()); // GLenum zpass
                break;
            case glStencilOpSeparate:
                builder.setArg0(ParseArgument()); // GLenum face
                builder.setArg1(ParseArgument()); // GLenum fail
                builder.setArg2(ParseArgument()); // GLenum zfail
                builder.setArg3(ParseArgument()); // GLenum zpass
                break;
            case glTexImage2D:
                Parse_glTexImage2D(builder);
                break;
            case glTexParameterf:
                builder.setArg0(ParseArgument()); // GLenum target
                builder.setArg1(ParseArgument()); // GLenum pname
                builder.setArg2(ParseFloat()); // GLfloat param
                break;
            case glTexParameterfv:
                Parse_glTexParameterfv(builder);
                break;
            case glTexParameteri:
                builder.setArg0(ParseArgument()); // GLenum target
                builder.setArg1(ParseArgument()); // GLenum pname
                builder.setArg2(ParseArgument()); // GLint param
                break;
            case glTexParameteriv:
                Parse_glTexParameteriv(builder);
                break;
            case glTexSubImage2D:
                Parse_glTexSubImage2D(builder);
                break;
            case glUniform1f:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseFloat()); // GLfloat x
                break;
            case glUniform1fv:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLsizei count
                builder.setData(ParseFloats(1 * builder.getArg1())); // GLfloat v
                break;
            case glUniform1i:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLint x
                break;
            case glUniform1iv:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLsizei count
                builder.setData(ParseInts(1 * builder.getArg1())); // GLint v
                break;
            case glUniform2f:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseFloat()); // GLfloat x
                builder.setArg2(ParseFloat()); // GLfloat y
                break;
            case glUniform2fv:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLsizei count
                builder.setData(ParseFloats(2 * builder.getArg1())); // GLfloat v
                break;
            case glUniform2i:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLint x
                builder.setArg2(ParseArgument()); // GLint y
                break;
            case glUniform2iv:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLsizei count
                builder.setData(ParseInts(2 * builder.getArg1())); // GLint v
                break;
            case glUniform3f:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseFloat()); // GLfloat x
                builder.setArg2(ParseFloat()); // GLfloat y
                builder.setArg3(ParseFloat()); // GLfloat z
                break;
            case glUniform3fv:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLsizei count
                builder.setData(ParseFloats(3 * builder.getArg1())); // GLfloat v
                break;
            case glUniform3i:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLint x
                builder.setArg2(ParseArgument()); // GLint y
                builder.setArg3(ParseArgument()); // GLint z
                break;
            case glUniform3iv:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLsizei count
                builder.setData(ParseInts(3 * builder.getArg1())); // GLint v
                break;
            case glUniform4f:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseFloat()); // GLfloat x
                builder.setArg2(ParseFloat()); // GLfloat y
                builder.setArg3(ParseFloat()); // GLfloat z
                builder.setArg4(ParseFloat()); // GLfloat w
                break;
            case glUniform4fv:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLsizei count
                builder.setData(ParseFloats(4 * builder.getArg1())); // GLfloat v
                break;
            case glUniform4i:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLint x
                builder.setArg2(ParseArgument()); // GLint y
                builder.setArg3(ParseArgument()); // GLint z
                builder.setArg4(ParseArgument()); // GLint w
                break;
            case glUniform4iv:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLsizei count
                builder.setData(ParseInts(4 * builder.getArg1())); // GLint v
                break;
            case glUniformMatrix2fv:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLsizei count
                builder.setArg2(ParseArgument()); // GLboolean transpose
                builder.setData(ParseMatrix(2, 4 * builder.getArg1())); // GLfloat value
                break;
            case glUniformMatrix3fv:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLsizei count
                builder.setArg2(ParseArgument()); // GLboolean transpose
                builder.setData(ParseMatrix(3, 9 * builder.getArg1())); // GLfloat value
                break;
            case glUniformMatrix4fv:
                builder.setArg0(ParseArgument()); // GLint location
                builder.setArg1(ParseArgument()); // GLsizei count
                builder.setArg2(ParseArgument()); // GLboolean transpose
                builder.setData(ParseMatrix(4, 16 * builder.getArg1())); // GLfloat value
                break;
            case glUseProgram:
                builder.setArg0(ParseArgument()); // GLuint program
                break;
            case glValidateProgram:
                builder.setArg0(ParseArgument()); // GLuint program
                break;
            case glVertexAttrib1f:
                builder.setArg0(ParseArgument()); // GLuint indx
                builder.setArg1(ParseFloat()); // GLfloat x
                break;
            case glVertexAttrib1fv:
                builder.setArg0(ParseArgument()); // GLuint indx
                builder.setData(ParseFloats(1)); // GLfloat values
                break;
            case glVertexAttrib2f:
                builder.setArg0(ParseArgument()); // GLuint indx
                builder.setArg1(ParseFloat()); // GLfloat x
                builder.setArg2(ParseFloat()); // GLfloat y
                break;
            case glVertexAttrib2fv:
                builder.setArg0(ParseArgument()); // GLuint indx
                builder.setData(ParseFloats(2)); // GLfloat values
                break;
            case glVertexAttrib3f:
                builder.setArg0(ParseArgument()); // GLuint indx
                builder.setArg1(ParseFloat()); // GLfloat x
                builder.setArg2(ParseFloat()); // GLfloat y
                builder.setArg3(ParseFloat()); // GLfloat z
                break;
            case glVertexAttrib3fv:
                builder.setArg0(ParseArgument()); // GLuint indx
                builder.setData(ParseFloats(3)); // GLfloat values
                break;
            case glVertexAttrib4f:
                builder.setArg0(ParseArgument()); // GLuint indx
                builder.setArg1(ParseFloat()); // GLfloat x
                builder.setArg2(ParseFloat()); // GLfloat y
                builder.setArg3(ParseFloat()); // GLfloat z
                builder.setArg4(ParseFloat()); // GLfloat w
                break;
            case glVertexAttrib4fv:
                builder.setArg0(ParseArgument()); // GLuint indx
                builder.setData(ParseFloats(4)); // GLfloat values
                break;
            case glVertexAttribPointer:
                Parse_glVertexAttribPointer(builder);
                break;
            case glViewport:
                builder.setArg0(ParseArgument()); // GLint x
                builder.setArg1(ParseArgument()); // GLint y
                builder.setArg2(ParseArgument()); // GLsizei width
                builder.setArg3(ParseArgument()); // GLsizei height
                break;
            default:
                assert false;
        }
    }
    abstract void Parse_glBufferData(Message.Builder builder);
    abstract void Parse_glBufferSubData(Message.Builder builder);
    abstract void Parse_glCompressedTexImage2D(Message.Builder builder);
    abstract void Parse_glCompressedTexSubImage2D(Message.Builder builder);
    abstract void Parse_glDrawElements(Message.Builder builder);
    abstract void Parse_glGetActiveAttrib(Message.Builder builder);
    abstract void Parse_glGetActiveUniform(Message.Builder builder);
    abstract void Parse_glGetAttachedShaders(Message.Builder builder);
    abstract void Parse_glGetBooleanv(Message.Builder builder);
    abstract void Parse_glGetBufferParameteriv(Message.Builder builder);
    abstract void Parse_glGetFloatv(Message.Builder builder);
    abstract void Parse_glGetFramebufferAttachmentParameteriv(Message.Builder builder);
    abstract void Parse_glGetIntegerv(Message.Builder builder);
    abstract void Parse_glGetProgramInfoLog(Message.Builder builder);
    abstract void Parse_glGetRenderbufferParameteriv(Message.Builder builder);
    abstract void Parse_glGetShaderInfoLog(Message.Builder builder);
    abstract void Parse_glGetShaderPrecisionFormat(Message.Builder builder);
    abstract void Parse_glGetShaderSource(Message.Builder builder);
    abstract void Parse_glGetTexParameterfv(Message.Builder builder);
    abstract void Parse_glGetTexParameteriv(Message.Builder builder);
    abstract void Parse_glGetUniformfv(Message.Builder builder);
    abstract void Parse_glGetUniformiv(Message.Builder builder);
    abstract void Parse_glGetVertexAttribfv(Message.Builder builder);
    abstract void Parse_glGetVertexAttribiv(Message.Builder builder);
    abstract void Parse_glGetVertexAttribPointerv(Message.Builder builder);
    abstract void Parse_glReadPixels(Message.Builder builder);
    abstract void Parse_glShaderBinary(Message.Builder builder);
    abstract void Parse_glShaderSource(Message.Builder builder);
    abstract void Parse_glTexImage2D(Message.Builder builder);
    abstract void Parse_glTexParameterfv(Message.Builder builder);
    abstract void Parse_glTexParameteriv(Message.Builder builder);
    abstract void Parse_glTexSubImage2D(Message.Builder builder);
    abstract void Parse_glVertexAttribPointer(Message.Builder builder);
}