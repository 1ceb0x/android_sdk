/*
 * Copyright (C) 2011 The Android Open Source Project
 *
 * Licensed under the Eclipse Public License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.eclipse.org/org/documents/epl-v10.php
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.menubar.internal;

import com.android.menubar.IMenuBarCallback;
import com.android.menubar.IMenuBarEnhancer;
import com.android.menubar.MenuBarEnhancer;

import org.eclipse.swt.SWT;
import org.eclipse.swt.internal.C;
import org.eclipse.swt.internal.Callback;
import org.eclipse.swt.internal.cocoa.NSApplication;
import org.eclipse.swt.internal.cocoa.NSMenu;
import org.eclipse.swt.internal.cocoa.NSMenuItem;
import org.eclipse.swt.internal.cocoa.NSObject;
import org.eclipse.swt.internal.cocoa.OS;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Menu;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;


/**
 * Implementation of IMenuBarEnhancer for MacOS Cocoa SWT
 * <p/>
 * Note: this is currently deactivated since we are not currently
 * shipping a version of SWT.jar that has cocoa support (only carbon).
 */
public final class MenuBarEnhancerCocoa implements IMenuBarEnhancer {

    private static final int kAboutMenuItem = 0;
    private static final int kPreferencesMenuItem = 2;
    private static final int kServicesMenuItem = 4;
    private static final int kHideApplicationMenuItem = 6;
    private static final int kQuitMenuItem = 10;

    private EnhancerDelegate mDelegate;
    private long mDelegateJniRef;
    private IMenuBarCallback mCallbacks;

    public static class EnhancerDelegate extends NSObject {
        public EnhancerDelegate() {
            super();
        }
        public EnhancerDelegate(int id) {
            super(id);
        }

    }
    static long sel_preferencesMenuItemSelected_;
    static long sel_aboutMenuItemSelected_;

    /* This callback is not freed */
    static Callback proc3Args;
    static final byte[] SWT_OBJECT = { 'S', 'W', 'T', '_', 'O', 'B', 'J', 'E', 'C', 'T', '\0' };

    public MenuBarEnhancerCocoa() {
    }

    public void setupMenu(
            String appName,
            Menu swtMenu,
            IMenuBarCallback callbacks) {
        mCallbacks = callbacks;
        final Display display = swtMenu.getDisplay();

        init1();

        try {
            mDelegate = new EnhancerDelegate();
            mDelegate.alloc().init();
            //call OS.NewGlobalRef
            Method method = OS.class.getMethod("NewGlobalRef", new Class[] { Object.class });
            Object object = method.invoke(OS.class, new Object[] { this });
            mDelegateJniRef = convertToLong(object);
        } catch (Exception e) {
            // theoretically, one of SecurityException, Illegal*Exception,
            // InvocationTargetException, NoSuch*Exception
            // not expected to happen at all.
            log(e);
        }

        if (mDelegateJniRef == 0) {
            SWT.error(SWT.ERROR_NO_HANDLES);
        }

        try {
            Field idField = EnhancerDelegate.class.getField("id");
            Object idValue = idField.get(mDelegate);
            invokeMethod(OS.class, "object_setInstanceVariable",
                    new Object[] { idValue, SWT_OBJECT, wrapPointer(mDelegateJniRef) });

            hookApplicationMenu(appName);

            // schedule disposal of callback object
            display.disposeExec(new Runnable() {
                public void run() {
                    if (mDelegateJniRef != 0) {
                        try {
                            invokeMethod(OS.class, "DeleteGlobalRef", new Object[] { wrapPointer(mDelegateJniRef) });
                        } catch (Exception e) {
                            // theoretically, one of SecurityException,Illegal*Exception,InvocationTargetException,NoSuch*Exception
                            // not expected to happen at all.
                            log(e);
                        }
                    }
                    mDelegateJniRef = 0;

                    if (mDelegate != null) {
                        mDelegate.release();
                        mDelegate = null;
                    }
                }
            });
        } catch (Exception e) {
            // theoretically, one of SecurityException,Illegal*Exception,InvocationTargetException,NoSuch*Exception
            // not expected to happen at all.
            log(e);
        }
    }

    private long registerName(String name) throws IllegalArgumentException, SecurityException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        Class clazz = OS.class;
        Object object = invokeMethod(clazz, "sel_registerName", new Object[] {name});
        return convertToLong(object);
    }

    private void init1() {
        try {
            if (sel_aboutMenuItemSelected_ == 0) {
                sel_preferencesMenuItemSelected_ = registerName("preferencesMenuItemSelected:"); //$NON-NLS-1$
                sel_aboutMenuItemSelected_ = registerName("aboutMenuItemSelected:"); //$NON-NLS-1$
                init2();
            }
        } catch (Exception e) {
            // theoretically, one of SecurityException,Illegal*Exception,InvocationTargetException,NoSuch*Exception
            // not expected to happen at all.
            log(e);
        }
    }

    private void init2() throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException, NoSuchFieldException {
        // TODO: These should either move out of Display or be accessible to this class.
        byte[] types = {'*','\0'};
        int size = C.PTR_SIZEOF, align = C.PTR_SIZEOF == 4 ? 2 : 3;

        Class clazz = this.getClass();

        proc3Args = new Callback(clazz, "actionProc", 3); //$NON-NLS-1$
        //call getAddress
        Method getAddress = Callback.class.getMethod("getAddress", new Class[0]);   //$NON-NLS-1$
        Object object = getAddress.invoke(proc3Args, null);
        long proc3 = convertToLong(object);
        if (proc3 == 0) {
            SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);
        }

        //call objc_allocateClassPair
        Field field = OS.class.getField("class_NSObject");  //$NON-NLS-1$
        Object fieldObj = field.get(OS.class);
        object = invokeMethod(OS.class, "objc_allocateClassPair",   //$NON-NLS-1$
                new Object[] { fieldObj, "SWTCocoaEnhancerDelegate", wrapPointer(0) }); //$NON-NLS-1$
        long cls = convertToLong(object);

        invokeMethod(OS.class, "class_addIvar", new Object[] {      //$NON-NLS-1$
                wrapPointer(cls), SWT_OBJECT, wrapPointer(size),
                new Byte((byte) align), types });

        // Add the action callback
        invokeMethod(OS.class, "class_addMethod", new Object[] {    //$NON-NLS-1$
                wrapPointer(cls),
                wrapPointer(sel_preferencesMenuItemSelected_),
                wrapPointer(proc3), "@:@" }); //$NON-NLS-1$
        invokeMethod(OS.class, "class_addMethod", new Object[] {    //$NON-NLS-1$
            wrapPointer(cls),
            wrapPointer(sel_aboutMenuItemSelected_),
            wrapPointer(proc3), "@:@" }); //$NON-NLS-1$

        invokeMethod(OS.class, "objc_registerClassPair",            //$NON-NLS-1$
                new Object[] { wrapPointer(cls) });
    }

    private void log(Exception e) {
        mCallbacks.printError("%1$s: %2$s", getClass().getSimpleName(), e.toString()); //$NON-NLS-1$
    }

    private void hookApplicationMenu(String appName) {
        try {
            // create About Eclipse menu command
            NSMenu mainMenu = NSApplication.sharedApplication().mainMenu();
            NSMenuItem mainMenuItem = (NSMenuItem) invokeMethod(NSMenu.class, mainMenu,
                    "itemAtIndex", new Object[] {wrapPointer(0)});  //$NON-NLS-1$
            NSMenu appMenu = mainMenuItem.submenu();

            // add the about action
            NSMenuItem aboutMenuItem = (NSMenuItem) invokeMethod(NSMenu.class, appMenu,
                    "itemAtIndex", new Object[] {wrapPointer(kAboutMenuItem)});
            aboutMenuItem.setTitle(NSString.stringWith("About " + appName));  //$NON-NLS-1$

            // enable pref menu
            NSMenuItem prefMenuItem = (NSMenuItem) invokeMethod(NSMenu.class, appMenu,
                    "itemAtIndex", new Object[] {wrapPointer(kPreferencesMenuItem)});  //$NON-NLS-1$
            prefMenuItem.setEnabled(true);

            // disable services menu
            NSMenuItem servicesMenuItem = (NSMenuItem) invokeMethod(NSMenu.class, appMenu,
                    "itemAtIndex", new Object[] {wrapPointer(kServicesMenuItem)});  //$NON-NLS-1$
            servicesMenuItem.setEnabled(false);

            // Register as a target on the prefs and quit items.
            prefMenuItem.setTarget(mDelegate);
            invokeMethod(NSMenuItem.class, prefMenuItem,
                    "setAction", new Object[] {wrapPointer(sel_preferencesMenuItemSelected_)});  //$NON-NLS-1$
            aboutMenuItem.setTarget(mDelegate);
            invokeMethod(NSMenuItem.class, aboutMenuItem,
                    "setAction", new Object[] {wrapPointer(sel_aboutMenuItemSelected_)});       //$NON-NLS-1$
        } catch (Exception e) {
            // theoretically, one of SecurityException,Illegal*Exception,InvocationTargetException,NoSuch*Exception
            // not expected to happen at all.
            log(e);
        }
    }

    void preferencesMenuItemSelected() {
        try {
            NSMenu mainMenu = NSApplication.sharedApplication().mainMenu();
            NSMenuItem mainMenuItem = (NSMenuItem) invokeMethod(NSMenu.class, mainMenu,
                    "itemAtIndex", new Object[] {wrapPointer(0)});                      //$NON-NLS-1$
            NSMenu appMenu = mainMenuItem.submenu();
            NSMenuItem prefMenuItem = (NSMenuItem) invokeMethod(NSMenu.class, appMenu, "" + //$NON-NLS-1$
                    "itemAtIndex", new Object[] {wrapPointer(kPreferencesMenuItem)});    //$NON-NLS-1$
            try {
                prefMenuItem.setEnabled(false);

                mCallbacks.onPreferencesMenuSelected();
            }
            finally {
                prefMenuItem.setEnabled(true);
            }
        } catch (Exception e) {
            // theoretically, one of SecurityException,Illegal*Exception,InvocationTargetException,NoSuch*Exception
            // not expected to happen at all.
            log(e);
        }
    }

    void aboutMenuItemSelected() {
        try {
            NSMenu mainMenu = NSApplication.sharedApplication().mainMenu();
            NSMenuItem mainMenuItem = (NSMenuItem) invokeMethod(NSMenu.class, mainMenu,
                    "itemAtIndex", new Object[] {wrapPointer(0)});              //$NON-NLS-1$
            NSMenu appMenu = mainMenuItem.submenu();
            NSMenuItem aboutMenuItem = (NSMenuItem) invokeMethod(NSMenu.class, appMenu,
                    "itemAtIndex", new Object[] {wrapPointer(kAboutMenuItem)}); //$NON-NLS-1$
            try {
                aboutMenuItem.setEnabled(false);

                mCallbacks.onAboutMenuSelected();
            }
            finally {
                aboutMenuItem.setEnabled(true);
            }
        } catch (Exception e) {
            // theoretically, one of SecurityException,Illegal*Exception,InvocationTargetException,NoSuch*Exception
            // not expected to happen at all.
            log(e);
        }
    }

    private long convertToLong(Object object) {
        if (object instanceof Integer) {
            Integer i = (Integer) object;
            return i.longValue();
        }
        if (object instanceof Long) {
            Long l = (Long) object;
            return l.longValue();
        }
        return 0;
    }

    private static Object invokeMethod(Class clazz, String methodName,
            Object[] args) throws IllegalArgumentException,
            IllegalAccessException, InvocationTargetException,
            SecurityException, NoSuchMethodException {
        return invokeMethod(clazz, null, methodName, args);
    }

    private static Object invokeMethod(Class clazz, Object target,
            String methodName, Object[] args) throws IllegalArgumentException,
            IllegalAccessException, InvocationTargetException,
            SecurityException, NoSuchMethodException {
        Class[] signature = new Class[args.length];
        for (int i = 0; i < args.length; i++) {
            Class thisClass = args[i].getClass();
            if (thisClass == Integer.class) {
                signature[i] = int.class;
            } else if (thisClass == Long.class) {
                signature[i] = long.class;
            } else if (thisClass == Byte.class) {
                signature[i] = byte.class;
            } else {
                signature[i] = thisClass;
            }
        }
        Method method = clazz.getMethod(methodName, signature);
        return method.invoke(target, args);
    }

    private static Object wrapPointer(long value) {
        Class PTR_CLASS =  C.PTR_SIZEOF == 8 ? long.class : int.class;
        if (PTR_CLASS == long.class) {
            return new Long(value);
        } else {
            return new Integer((int)value);
        }
    }
}
